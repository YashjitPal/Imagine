import React, { useState, useEffect, useRef } from 'react';
import SkeletonLoader from './SkeletonLoader';

const AddIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
    <svg 
        width="16" 
        height="16" 
        viewBox="0 0 24 24" 
        fill="none" 
        stroke="currentColor" 
        strokeWidth="3" 
        strokeLinecap="round" 
        strokeLinejoin="round" 
        className="text-white"
        {...props}
    >
        <line x1="12" y1="5" x2="12" y2="19"></line>
        <line x1="5" y1="12" x2="19" y2="12"></line>
    </svg>
);


interface ImageCardProps {
  src?: string;
  index: number;
  onView: (src: string) => void;
  onAddToPrompt: (src: string) => void;
}

const ImageCard: React.FC<ImageCardProps> = ({ src, index, onView, onAddToPrompt }) => {
  const [isImageLoaded, setIsImageLoaded] = useState(false);
  const prevSrc = useRef(src);

  useEffect(() => {
    // When the component re-renders with a new `src` (from undefined to a value),
    // we reset the loaded state to allow the animation to re-trigger.
    if (src && src !== prevSrc.current) {
      setIsImageLoaded(false);
    }
    prevSrc.current = src;
  }, [src]);

  const handleImageLoad = () => {
    // A small timeout ensures the browser has rendered the image element
    // before we apply the opacity class, guaranteeing the transition fires.
    setTimeout(() => {
      setIsImageLoaded(true);
    }, 50);
  };
  
  const handleAddToPrompt = (e: React.MouseEvent) => {
    e.stopPropagation();
    if (src) onAddToPrompt(src);
  };
  
  const handleView = () => {
    if (src) onView(src);
  };

  const hasSrc = !!src;

  return (
    <div
      className="relative group w-full aspect-[3/4] bg-[#222326] rounded-2xl overflow-hidden animate-fadeInScaleUp"
      style={{ animationDelay: `${index * 100}ms`, opacity: 0 }}
      onClick={hasSrc ? handleView : undefined}
    >
      {/* Skeleton is always present, but fades out when the image is loaded */}
      <div className={`absolute inset-0 transition-opacity duration-[1500ms] ease-in-out ${isImageLoaded ? 'opacity-0' : 'opacity-100'}`} aria-hidden="true">
        <SkeletonLoader index={index} />
      </div>

      {/* Image is rendered when src exists and fades in when loaded */}
      {hasSrc && (
          <img
            src={src}
            alt="Generated by AI"
            className={`absolute inset-0 w-full h-full object-cover transition-all duration-[1500ms] ease-in-out group-hover:scale-105 ${isImageLoaded ? 'opacity-100' : 'opacity-0'}`}
            onLoad={handleImageLoad}
          />
      )}

      {/* Action button is only visible on hover after the image has loaded */}
      <button
        onClick={handleAddToPrompt}
        className={`absolute bottom-3 right-3 w-8 h-8 flex items-center justify-center bg-black/40 backdrop-blur-sm rounded-full transition-all duration-200 hover:bg-black/60 ${isImageLoaded ? 'opacity-0 group-hover:opacity-100' : 'opacity-0'}`}
        aria-label="Add image to prompt"
        disabled={!isImageLoaded}
      >
        <AddIcon />
      </button>
    </div>
  );
};

export default ImageCard;